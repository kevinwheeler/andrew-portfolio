@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.bunny.net/css?family=Nunito');

@import 'variables';

@layer components {
    // I know the tailwind docs say not use composite classes if at all possible, but whatever.
    .accent-color {
        @apply bg-gradient-to-br from-sky-500 to-cyan-400 bg-clip-text text-transparent;
    }

    // .blue-bullet {
    //     @apply marker:content-['\2981'] marker:text-sky-500;
    // }

        .blue-bullet {
            @apply relative before:content-['\2981'] before:absolute before:left-[-0.6em] before:top-[-0.1em] before:text-3xl before:text-sky-500;
        }
}

@layer utilities {
    .overflow-anywhere {
      overflow-wrap: anywhere;
    }

    .from-right {
        opacity: 0;
        @apply translate-x-1/2;
    }

    .from-right.is-inViewport {
        opacity: 1;
        @apply translate-x-0;
        
    }

    .from-left {
        opacity: 0;
        @apply -translate-x-1/2;
    }

    .from-left.is-inViewport {
        opacity: 1;
        @apply translate-x-0;
    }

    @media (min-width: 640px) {
        // Need this to have higer specificity than .from-left.is-inViewport and .from-right.is-inViewport
        // So it needs to come afterwards in this file.
        .sm\:translate-x-1\/2-in-viewport.is-inViewport {
            @apply translate-x-1/2;
        }

        .sm\:from-right {
          opacity: 0;
          @apply translate-x-1/2;
        }
        .sm\:from-right.is-inViewport {
            opacity: 1;
            @apply translate-x-0;
        }

        .sm\:from-left {
          opacity: 0;
          @apply -translate-x-1/2;
        }

        .sm\:from-left.is-inViewport {
            opacity: 1;
            @apply translate-x-0;
        }
        .sm\:from-cancel {
            opacity: 1;
            @apply -translate-x-0;
        }

        .sm\:from-cancel.is-inViewport {
            opacity: 1;
        }

        // need this to have higher precedence than from-left and from-right.
        .sm\:translate-x-1\/2\+12px {
            transform: translateX(calc(50% + 12px));
        }

        // need this to have higher precedence than from-left.is-inViewport and from-right.is-inViewport.
        .sm\:translate-x-1\/2\+12px.is-inViewport {
            // @apply translate-x-[calc(50%+12px)];
            transform: translateX(calc(50% + 12px));
        }
    }

    .fade-in {
        opacity: 0;
    }

    .fade-in.is-inViewport {
        opacity: 1;
    }

    .hero {
        position: relative;
        min-height: 100lvh;
    }
    
    .hero__video {
        // absolute to position video outside of parent's padding.
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 100;
        object-fit: cover;
        object-position: center;
    }

    .hero__video--right {
        object-position: right center;
    }
    
    .hero__content {
        position: relative;
        z-index: 101;
    }

    .text-shadow {
        text-shadow: 1px 1px 2px black;
    }
}



  